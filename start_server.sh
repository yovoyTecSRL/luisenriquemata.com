#!/bin/bash

# Script de inicio del servidor con auto-recuperaci√≥n
# Para mantener el servidor siempre activo

SERVER_PORT=${1:-8000}
SERVER_HOST=${2:-"0.0.0.0"}
MAX_RETRIES=5
RETRY_DELAY=10

echo "üöÄ Iniciando servidor Luis Enrique Mata Landing..."
echo "üìç Puerto: $SERVER_PORT"
echo "üìç Host: $SERVER_HOST"

# Funci√≥n para verificar si el puerto est√° libre
check_port() {
    if lsof -Pi :$SERVER_PORT -sTCP:LISTEN -t >/dev/null 2>&1; then
        echo "‚ö†Ô∏è  Puerto $SERVER_PORT ya est√° en uso"
        echo "Terminando proceso existente..."
        pkill -f "python.*main.py" || true
        sleep 5
    fi
}

# Funci√≥n para instalar dependencias
install_dependencies() {
    echo "üì¶ Instalando dependencias..."
    if [ -f "requirements.txt" ]; then
        pip install -r requirements.txt
    else
        echo "‚ùå No se encontr√≥ requirements.txt"
        exit 1
    fi
}

# Funci√≥n para iniciar el servidor
start_server() {
    echo "üåê Iniciando servidor en http://$SERVER_HOST:$SERVER_PORT"
    python main.py --port $SERVER_PORT --host $SERVER_HOST
}

# Funci√≥n de monitoreo y auto-recuperaci√≥n
monitor_and_restart() {
    local retries=0
    
    while [ $retries -lt $MAX_RETRIES ]; do
        echo "üîÑ Intento $((retries + 1)) de $MAX_RETRIES"
        
        # Verificar y liberar puerto si es necesario
        check_port
        
        # Iniciar servidor
        start_server &
        SERVER_PID=$!
        
        # Esperar un momento para que el servidor inicie
        sleep 5
        
        # Verificar si el servidor est√° corriendo
        if kill -0 $SERVER_PID 2>/dev/null; then
            echo "‚úÖ Servidor iniciado correctamente (PID: $SERVER_PID)"
            
            # Monitorear el servidor
            while kill -0 $SERVER_PID 2>/dev/null; do
                sleep 30
                # Verificar health check
                if ! curl -s http://localhost:$SERVER_PORT/health >/dev/null 2>&1; then
                    echo "‚ùå Health check fall√≥, reiniciando servidor..."
                    kill $SERVER_PID 2>/dev/null || true
                    break
                fi
            done
            
            echo "üõë Servidor detenido, intentando reiniciar..."
        else
            echo "‚ùå Error al iniciar servidor"
        fi
        
        retries=$((retries + 1))
        
        if [ $retries -lt $MAX_RETRIES ]; then
            echo "‚è≥ Esperando $RETRY_DELAY segundos antes del siguiente intento..."
            sleep $RETRY_DELAY
        fi
    done
    
    echo "üí• M√°ximo n√∫mero de reintentos alcanzado. Deteniendo script."
    exit 1
}

# Script principal
main() {
    # Verificar si Python est√° instalado
    if ! command -v python &> /dev/null; then
        echo "‚ùå Python no est√° instalado"
        exit 1
    fi
    
    # Verificar si pip est√° instalado
    if ! command -v pip &> /dev/null; then
        echo "‚ùå pip no est√° instalado"
        exit 1
    fi
    
    # Instalar dependencias
    install_dependencies
    
    # Configurar trap para manejar se√±ales de interrupci√≥n
    trap 'echo "üõë Deteniendo servidor..."; kill $SERVER_PID 2>/dev/null || true; exit 0' INT TERM
    
    # Iniciar monitoreo y auto-recuperaci√≥n
    monitor_and_restart
}

# Ejecutar script principal
main "$@"
